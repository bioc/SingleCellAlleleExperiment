% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllClasses.R, R/SingleCellAlleleExperiment.R
\docType{class}
\name{SingleCellAlleleExperiment-class}
\alias{SingleCellAlleleExperiment-class}
\alias{.scae}
\alias{SingleCellAlleleExperiment}
\title{Constructor SingleCellAlleleExperiment class}
\usage{
SingleCellAlleleExperiment(
  ...,
  lookup,
  metadata = NULL,
  threshold = 0,
  exp_type = "ENS",
  log = TRUE,
  gene_symbols = FALSE,
  verbose = FALSE
)
}
\arguments{
\item{...}{Arguments passed to the \code{\link{SingleCellExperiment}} constructor to fill the slots of the SCE-class.}

\item{lookup}{A data.frame object containing the lookup table.}

\item{metadata}{potential information regarding plotting a knee plot for quality control.}

\item{threshold}{An integer value used as a threshold for filtering low-quality barcodes/cells.}

\item{exp_type}{A vector containing two character strings. Either \code{"WTA"} or \code{"Amplicon"} are valid inputs. Choose one depending on the used transcriptomics approach.}

\item{log}{binary if user wants to compute \code{logcounts} assay.}

\item{gene_symbols}{A logical parameter to decide whether to compute the NCBI gene names in case the raw data only contains ENSEMBL gene identifiers.}

\item{verbose}{A logical parameter to decide if runtime-messages should be shown during function execution.
Use \code{FALSE} if no info runtime-messages should be shown (default), and \code{TRUE} for showing runtime-messages.}
}
\value{
A SingleCellAlleleExperiment object.
}
\description{
Constructor for the \code{SingleCellAllelExperiment} (SCAE) class.
Constructor is used in the read in function \code{read_allele_counts()}. Performing all necessary steps to transform
a \code{SingleCellExperiment} object into the extended \code{SingleCellAlleleExperiment} object. SCAE objects
contain allele, gene and functional level quantification results. The additional layers are stored as additional
rows in the count assays as well as in extended rowData.
}
\examples{
##-If you want to use the Constructor on its own, some preprocessing is
##-necessary to bring the data in proper format
##-Here, we use an example dataset found in in the `scaeData` package.

##-Find an alternative and recommended read in below as a second example

example_data_5k <- scaeData::scaeDataGet(dataset="pbmc_5k")
lookup_name <- "pbmc_5k_lookup_table.csv"
lookup <- read.csv(system.file("extdata", lookup_name, package="scaeData"))

barcode_loc <- file.path(example_data_5k$dir, example_data_5k$barcodes)
feature_loc <- file.path(example_data_5k$dir, example_data_5k$features)
matrix_loc  <- file.path(example_data_5k$dir, example_data_5k$matrix)

feature_info <- utils::read.delim(feature_loc, header=FALSE)
cell_names   <- utils::read.csv(barcode_loc, sep="", header=FALSE)
mat <- t(Matrix::readMM(matrix_loc))

##-Prepare input data
colnames(feature_info) <- "Ensembl_ID"
sample_names <- "pbmc_5k"
sparse_mat <- as(mat, "CsparseMatrix")

##--colData
cell_info_list <- S4Vectors::DataFrame(Sample=rep(sample_names,
                                                 length(cell_names)),
                                      Barcode=cell_names$V1,
                                      row.names=NULL)
##--rowData and count matrix
rownames(feature_info) <- feature_info[,1]
cnames <- cell_info_list$Barcode
colnames(sparse_mat) <- cnames

scae <- SingleCellAlleleExperiment(assays=list(counts=sparse_mat),
                                   rowData=feature_info,
                                   colData=cell_info_list,
                                   lookup=lookup,
                                   verbose=TRUE)

scae


##-OR, use the read in function `read_allele_counts()` !![RECOMMENDED]!!
##-Find more examples in its documentation using `?read_allele_counts`

# scae_2 <- read_allele_counts(example_data_5k$dir,
#                              sample_names="example_data",
#                              filter_mode="no",
#                              lookup_file=lookup,
#                              barcode_file=example_data_5k$barcodes,
#                              gene_file=example_data_5k$features,
#                              matrix_file=example_data_5k$matrix,
#                              verbose=TRUE)

# scae_2

}
